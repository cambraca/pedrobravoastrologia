<?php

/**
 * Implements hook_form_FORM_ID_alter().
 * Sets the default post date to the last post's date + 1 day, but only if the
 * last post is in the future.
 */
function pba_ephemeris_form_node_post_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'post');
  $query->sort('field_date', 'DESC');
  $query->range(0, 1);
  $nids = $query->execute();
  if ($nids) {
    $last_post = \Drupal\node\Entity\Node::load(current($nids));
    $date = new \Drupal\Core\Datetime\DrupalDateTime($last_post->get('field_date')->value);
    if ($date > new \Drupal\Core\Datetime\DrupalDateTime()) {
      $form['field_date']['widget'][0]['value']['#default_value'] = $date->add(new DateInterval('P1D'));
    }
  }
}

/**
 * @param \Drupal\node\Entity\Node $node
 * @param string $direction
 *
 * @return \Drupal\node\Entity\Node|null
 */
function _pba_ephemeris_adjacent_post(\Drupal\node\Entity\Node $node, $direction = 'prev') {
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'post');
  if (\Drupal::currentUser()->isAnonymous())
    $query->condition('status', \Drupal\node\NodeInterface::PUBLISHED);
  $query->condition('field_date', $node->get('field_date')->value, $direction === 'next' ? '>' : '<');
  $query->sort('field_date', $direction === 'next' ? 'ASC' : 'DESC');
  $query->range(0, 1);
  $nids = $query->execute();
  if (!$nids)
    return NULL;
  return \Drupal\node\Entity\Node::load(current($nids));
}

/**
 * Implements hook_entity_view_alter().
 */
function pba_ephemeris_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'post') {
    return;
  }

  if ($entity->field_image->entity)
    $build['body']['#access'] = FALSE;

  if (!$entity->isPublished())
    $build['#attributes']['class'][] = 'unpublished';

  switch ($display->getOriginalMode()) {
    case 'full':
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');

      $prev = _pba_ephemeris_adjacent_post($entity, 'prev');
      if ($prev) {
        $build['prev'] = [
          '#type' => 'container',
          '#weight' => 100,
          '#attributes' => ['class' => ['prev']],
          'node' => $view_builder->view($prev, 'teaser'),
        ];
      }

      $next = _pba_ephemeris_adjacent_post($entity, 'next');
      if ($next) {
        $build['next'] = [
          '#type' => 'container',
          '#weight' => 101,
          '#attributes' => ['class' => ['next']],
          'node' => $view_builder->view($next, 'teaser'),
        ];
      }
      break;
    case 'teaser':
      $build['title']['#access'] = FALSE;
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function pba_ephemeris_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle() !== 'post')
    return;

  foreach (['prev', 'next'] as $direction) {
    $adjacent = _pba_ephemeris_adjacent_post($entity, $direction);
    if (!$adjacent)
      continue;

    \Drupal\Core\Cache\Cache::invalidateTags($adjacent->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_theme().
 */
function pba_ephemeris_theme($existing, $type, $theme, $path) {
  return [
    'sidebar_calendar_month' => [
      'variables' => [
        'date' => NULL,
      ],
    ],
    'sidebar_calendar_year' => [
      'variables' => [
        'date' => NULL,
        'months' => NULL,
      ],
    ],
    'sidebar_calendar' => [
      'variables' => [
        'years' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pba_ephemeris_preprocess_sidebar_calendar_month(&$variables) {
  /** @var \Drupal\node\Entity\Node|NULL $current_post */
  $current_post = \Drupal::routeMatch()->getParameter('node');

  /** @var \Drupal\Core\Datetime\DrupalDateTime $from */
  $from = $variables['date'];
  $to = clone $from;
  $to->add(new DateInterval('P1M'));
  $posts_by_date = [];

  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'post');
  if (\Drupal::currentUser()->isAnonymous())
    $query->condition('status', \Drupal\node\NodeInterface::PUBLISHED);
  $query->condition('field_date', $from->format('Y-m-d'), '>=');
  $query->condition('field_date', $to->format('Y-m-d'), '<');
  $nids = $query->execute();

  if ($nids)
    foreach (\Drupal\node\Entity\Node::loadMultiple($nids) as $post) {
      /** @var \Drupal\node\Entity\Node $post */
      $date = new \Drupal\Core\Datetime\DrupalDateTime($post->get('field_date')->value);
      $class = [];
      if ($current_post && $post->id() === $current_post->id())
        $class[] = 'active';
      if (!$post->isPublished())
        $class[] = 'unpublished';
      $posts_by_date[intval($date->format('j'))] = [
        'url' => $post->toUrl(),
        'date' => $date,
        'class' => implode(' ', $class),
      ];
    }

  $variables['posts_by_date'] = $posts_by_date;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * This should ideally be done using CustomMenuActiveTrail. See PbaEphemerisServiceProvider.php.
 */
function pba_ephemeris_preprocess_menu(&$variables) {
  if ($variables['menu_name'] !== 'main')
    return;

  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node || $node->bundle() !== 'post')
    return;

  foreach ($variables['items'] as &$item) {
    /** @var \Drupal\Core\Url $url */
    $url = $item['url'];
    if ($url->getRouteName() === 'pba_ephemeris.latest') {
      $item['extra'] = ['class' => 'is-active'];
      return;
    }
  }
}

/**
 * Implements hook_cron().
 */
function pba_ephemeris_cron() {
  $request_time = \Drupal::time()->getRequestTime();
  $config = \Drupal::configFactory()->getEditable('pba_ephemeris.settings');

  $post_to_fb = $config->get('post_to_facebook');
  if (!$config->get('auto_publish'))
    return;

  $now = new \Drupal\Core\Datetime\DrupalDateTime();
  $publish_time = new \Drupal\Core\Datetime\DrupalDateTime($config->get('publish_time'));
  $publish_time->setDate($now->format('Y'), $now->format('m'), $now->format('d'));

  $window_end = clone $publish_time;
  $window_end->add(new DateInterval('PT8H'));

  if ($now < $publish_time || $now > $window_end)
    // Window to publish is from "publish time" setting (e.g. 8am) to 8 hours after that.
    return;

  $last_ran = \Drupal::state()->get('pba_ephemeris.last_ran');
  if ($last_ran > ($request_time - 60 * 60 * 2))
    // Exit if it has run in the last 2 hours
    return;
  \Drupal::state()->set('pba_ephemeris.last_ran', $request_time);

  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'post');
  $query->condition('status', \Drupal\node\NodeInterface::NOT_PUBLISHED);
  $query->condition('field_date', $now->format('Y-m-d'));
  $query->exists('field_image');
  $nids = $query->execute();
  if (!$nids)
    return;

  /** @var \Drupal\node\Entity\Node $post */
  foreach (\Drupal\node\Entity\Node::loadMultiple($nids) as $post) {
    $post->setPublished()->save();

    if ($post_to_fb)
      \Drupal\pba_ephemeris\SocialMedia::postToFacebook($post);

    \Drupal::logger('pba_ephemeris')
      ->info('Published post', ['link' => $post->toLink()->toString()]);
  }
}
